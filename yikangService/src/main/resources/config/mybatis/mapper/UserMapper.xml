<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.yikangyiliao.pension.dao.UserDao" >
  <resultMap id="BaseResultMap" type="com.yikangyiliao.pension.entity.User">
    <id column="user_id" jdbcType="BIGINT" property="userId" />
    <result column="user_name" jdbcType="VARCHAR" property="userName" />
    <result column="login_name" jdbcType="VARCHAR" property="loginName" />
    <result column="login_password" jdbcType="VARCHAR" property="loginPassword" />
    <result column="salt" jdbcType="VARCHAR" property="salt" />
    <result column="access_tiket" jdbcType="VARCHAR" property="accessTiket" />
    <result column="create_time" jdbcType="BIGINT" property="createTime" />
    <result column="login_time" jdbcType="BIGINT" property="loginTime" />
    <result column="invitation_code" jdbcType="VARCHAR" property="invitationCode" />
    <result column="push_alias" jdbcType="VARCHAR" property="pushAlias" />
  </resultMap>
  <sql id="Base_Column_List">
    user_id, user_name, login_name, login_password, salt, access_tiket, create_time, 
    login_time, invitation_code, push_alias
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from users
    where user_id = #{userId,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from users
    where user_id = #{userId,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="com.yikangyiliao.pension.entity.User">
    insert into users (user_id, user_name, login_name, 
      login_password, salt, access_tiket, 
      create_time, login_time, invitation_code, 
      push_alias)
    values (#{userId,jdbcType=BIGINT}, #{userName,jdbcType=VARCHAR}, #{loginName,jdbcType=VARCHAR}, 
      #{loginPassword,jdbcType=VARCHAR}, #{salt,jdbcType=VARCHAR}, #{accessTiket,jdbcType=VARCHAR}, 
      #{createTime,jdbcType=BIGINT}, #{loginTime,jdbcType=BIGINT}, #{invitationCode,jdbcType=VARCHAR}, 
      #{pushAlias,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.yikangyiliao.pension.entity.User">
    <selectKey resultType="Long" keyProperty="userId" order="AFTER">
		SELECT LAST_INSERT_ID()
	</selectKey>
    insert into users
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="userId != null">
        user_id,
      </if>
      <if test="userName != null">
        user_name,
      </if>
      <if test="loginName != null">
        login_name,
      </if>
      <if test="loginPassword != null">
        login_password,
      </if>
      <if test="salt != null">
        salt,
      </if>
      <if test="accessTiket != null">
        access_tiket,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="loginTime != null">
        login_time,
      </if>
      <if test="invitationCode != null">
        invitation_code,
      </if>
      <if test="pushAlias != null">
        push_alias,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="userId != null">
        #{userId,jdbcType=BIGINT},
      </if>
      <if test="userName != null">
        #{userName,jdbcType=VARCHAR},
      </if>
      <if test="loginName != null">
        #{loginName,jdbcType=VARCHAR},
      </if>
      <if test="loginPassword != null">
        #{loginPassword,jdbcType=VARCHAR},
      </if>
      <if test="salt != null">
        #{salt,jdbcType=VARCHAR},
      </if>
      <if test="accessTiket != null">
        #{accessTiket,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=BIGINT},
      </if>
      <if test="loginTime != null">
        #{loginTime,jdbcType=BIGINT},
      </if>
      <if test="invitationCode != null">
        #{invitationCode,jdbcType=VARCHAR},
      </if>
      <if test="pushAlias != null">
        #{pushAlias,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.yikangyiliao.pension.entity.User">
    update users
    <set>
      <if test="userName != null">
        user_name = #{userName,jdbcType=VARCHAR},
      </if>
      <if test="loginName != null">
        login_name = #{loginName,jdbcType=VARCHAR},
      </if>
      <if test="loginPassword != null">
        login_password = #{loginPassword,jdbcType=VARCHAR},
      </if>
      <if test="salt != null">
        salt = #{salt,jdbcType=VARCHAR},
      </if>
      <if test="accessTiket != null">
        access_tiket = #{accessTiket,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=BIGINT},
      </if>
      <if test="loginTime != null">
        login_time = #{loginTime,jdbcType=BIGINT},
      </if>
      <if test="invitationCode != null">
        invitation_code = #{invitationCode,jdbcType=VARCHAR},
      </if>
      <if test="pushAlias != null">
        push_alias = #{pushAlias,jdbcType=VARCHAR},
      </if>
    </set>
    where user_id = #{userId,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.yikangyiliao.pension.entity.User">
    update users
    set user_name = #{userName,jdbcType=VARCHAR},
      login_name = #{loginName,jdbcType=VARCHAR},
      login_password = #{loginPassword,jdbcType=VARCHAR},
      salt = #{salt,jdbcType=VARCHAR},
      access_tiket = #{accessTiket,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=BIGINT},
      login_time = #{loginTime,jdbcType=BIGINT},
      invitation_code = #{invitationCode,jdbcType=VARCHAR},
      push_alias = #{pushAlias,jdbcType=VARCHAR}
    where user_id = #{userId,jdbcType=BIGINT}
  </update>
 
 <!--修改用户的邀请码  -->
  <update id="updateInvitationCodeByUserId" parameterType="map">
  	update users set invitation_code = #{invitationCode,jdbcType=VARCHAR}
  	where user_id=#{userId,jdbcType=BIGINT}
  </update>

  
<!--   根据用户名称查询某一个用户信息 -->
  <select id="getUserByLoginName" parameterType="string" resultMap="BaseResultMap">
  	select 
  		<include refid="Base_Column_List"></include> 
  	from users
  	<where>
  		login_name=#{userName}
  	</where>
  </select>
  
  <!-- 修改用户的密码 -->
  <update id="updatePasswordByLoginName" parameterType="map">
  	update users us set us.login_password=#{password}
  	where login_name=#{userName}
  </update>
  
  
</mapper>